const { expect: playwrightExpect } = require('@playwright/test');

// Verifica se o objeto é um Locator do Playwright
function isLocator(obj) {
  return obj && typeof obj.evaluate === 'function';
}

class LibExpect {
  constructor(locator) {
    this.locator = locator;
  }

  async not(method, ...args) {
    await playwrightExpect(this.locator).not[method](...args);
  }

  async method(method, ...args) {
    await playwrightExpect(this.locator)[method](...args);
  }
}

const expect = (locator) => {
  if (isLocator(locator)) {
    return new Proxy(playwrightExpect(locator), {
      get: (target, prop) => {
        if (prop === 'not') {
          return new Proxy(target.not, {
            get: (notTarget, method) => {
              return async (...args) => {
                await target.not[method](...args);
              };
            }
          });
        }
        return async (...args) => {
          await target[prop](...args);
        };
      }
    });
  }

  // Se não for um locator, mantém o comportamento original
  const libExpect = new LibExpect(locator);

  return new Proxy(libExpect, {
    get: (target, prop) => {
      if (prop === 'not') {
        return new Proxy(playwrightExpect(locator).not, {
          get: (target, method) => {
            return async (...args) => {
              await libExpect.not(method, ...args);
            };
          }
        });
      }

      return async (...args) => {
        await libExpect.method(prop, ...args);
      };
    }
  });
};

// Exemplo de uso
async function toBeAttached() {
  const locator = page.locator('input[name=AGN]');
  await expect(locator).toBeAttached();  // Funciona agora corretamente
}
