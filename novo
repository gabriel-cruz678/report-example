const { expect: playwrightExpect } = require('@playwright/test');
const logger = require('./logger');
const util = require('./util');

class LibExpected {
    constructor(locator) {
        this.locator = locator;
    }

    async not(method, ...args) {
        const capturaAcao = `not.${method}`;
        logger.info(`Iniciando a ação: ${capturaAcao}`);
        await playwrightExpect(this.locator).not[method](...args);
        await this.captureScreenshot(capturaAcao); // Captura a tela após a execução
    }

    async method(method, ...args) {
        const capturaAcao = `${method}`;
        logger.info(`Iniciando a ação: ${capturaAcao}`);
        await playwrightExpect(this.locator)[method](...args);
        await this.captureScreenshot(capturaAcao); // Captura a tela após a execução
    }

    async captureScreenshot(fileName) {
        await util.screenshot(fileName); // Captura a tela sem passar a página
    }
}

const expect = (locator) => {
    return new Proxy({}, {
        get: (target, prop) => {
            if (prop === 'not') {
                return new Proxy({}, {
                    get: (target, method) => {
                        return async (...args) => {
                            const locatorInstance = await locator;
                            const libExpected = new LibExpected(locatorInstance);
                            return libExpected.not(method, ...args);
                        };
                    }
                });
            } else {
                return async (...args) => {
                    const locatorInstance = await locator;
                    const libExpected = new LibExpected(locatorInstance);
                    return libExpected.method(prop, ...args);
                };
            }
        }
    });
};

module.exports = expect;
